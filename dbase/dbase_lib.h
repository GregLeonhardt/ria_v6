/*******************************  COPYRIGHT  ********************************/
/**
 *  Author? "Gregory N. Leonhardt"
 *  License? "CC BY-NC 2.0"
 *           "https://creativecommons.org/licenses/by-nc/2.0/"
 *
 ****************************************************************************/

#ifndef DBASE_LIB_H
#define DBASE_LIB_H

/******************************** JAVADOC ***********************************/
/**
 *  This file contains private definitions (etc.) that apply to internal
 *  library components of the 'dbase' library.
 *
 *  @note
 *
 ****************************************************************************/

/****************************************************************************
 *  Compiler directives
 ****************************************************************************/

#ifdef ALLOC_DBASE
   #define DBASE_EXT
#else
   #define DBASE_EXT         extern
#endif

#define DBASE_ACCESS_LOG        ( 1 )

/****************************************************************************
 * System APIs
 ****************************************************************************/

                                //*******************************************
                                //*******************************************

/****************************************************************************
 * Application APIs
 ****************************************************************************/

                                //*******************************************
                                //*******************************************

/****************************************************************************
 * Library Private Definitions
 ****************************************************************************/

//----------------------------------------------------------------------------
/**
 *      note:   Must be large enough to hold the largest recipe             */
#define DB_COMMAND_L            ( 65536 * 2 )
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Enumerations
 ****************************************************************************/

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Structures
 ****************************************************************************/

//----------------------------------------------------------------------------
struct  db_title_t
{
    char                    *   recipe_id_p;
    char                    *   title_p;
};
//----------------------------------------------------------------------------
struct  db_recipe_t
{
    char                    *   recipe_id_p;
    char                    *   recipe_data_p;
};
//----------------------------------------------------------------------------
struct  db_info_t
{
    char                    *   recipe_id_p;
    char                    *   author_p;
    char                    *   serves_p;
    char                    *   makes_p;
    char                    *   makes_unit_p;
    char                    *   time_prep_p;
    char                    *   time_cook_p;
    char                    *   time_wait_p;
    char                    *   time_rest_p;
    char                    *   source_p;
    char                    *   copyright_p;
    int                         skill_p;
    int                         rating_p;
};
//----------------------------------------------------------------------------
struct  db_cuisine_t
{
    char                    *   recipe_id_p;
    struct  list_base_t     *   cuisine_list_p;
};
//----------------------------------------------------------------------------
struct  db_occasion_t
{
    char                    *   recipe_id_p;
    struct  list_base_t     *   occasion_list_p;
};
//----------------------------------------------------------------------------
struct  db_meal_t
{
    char                    *   recipe_id_p;
    struct  list_base_t     *   meal_list_p;
};
//----------------------------------------------------------------------------
struct  db_diet_t
{
    char                    *   recipe_id_p;
    struct  list_base_t     *   diet_list_p;
};
//----------------------------------------------------------------------------
struct  db_appliance_t
{
    char                    *   recipe_id_p;
    struct  list_base_t     *   appliance_list_p;
};
//----------------------------------------------------------------------------
struct  db_chapter_t
{
    char                    *   recipe_id_p;
    struct  list_base_t     *   chapter_list_p;
};
//----------------------------------------------------------------------------
struct  db_source_t
{
    char                    *   recipe_id_p;
    char                    *   src_format_p;
    char                    *   file_name_p;
    char                    *   file_size_p;
    char                    *   file_date_time_p;
    char                    *   group_name_p;
    char                    *   group_subject_p;
    char                    *   group_date_time_p;
    char                    *   email_name_p;
    char                    *   email_subject_p;
    char                    *   email_date_time_p;
};

/****************************************************************************
 * Library Private Storage Allocation
 ****************************************************************************/

//----------------------------------------------------------------------------
/**
 * @param con               MariaDB connector                           */
MYSQL                       *   con;
//----------------------------------------------------------------------------

/****************************************************************************
 * Library Private Prototypes
 ****************************************************************************/

//----------------------------------------------------------------------------
//  DBASE__lib.c
//----------------------------------------------------------------------------
void
MYQL__access_error(
    char                    *   sql_p
    );
//----------------------------------------------------------------------------
int
DBASE__address_get(
    char                    *   put_address_p,
    char                    *   get_address_p
    );
//----------------------------------------------------------------------------
int
DBASE__open(
    );
//----------------------------------------------------------------------------
int
DBASE__add_col_val(
    char                    *   db_column_p,
    int                         db_column_l,
    char                    *   db_value_p,
    int                         db_value_l,
    char                    *   name_p,
    char                    *   value_p
    );
//----------------------------------------------------------------------------
int
DBASE__discard_recipe(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
//  DBASE__title.c
//----------------------------------------------------------------------------
int
DBASE__title_exists(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__title_create(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__title_read(
    struct  rcb_t           *   rcb_p,
    struct  db_title_t      *   db_title_p
    );
//----------------------------------------------------------------------------
int
DBASE__title_update(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__title_delete(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
//  DBASE__recipe.c
//----------------------------------------------------------------------------
int
DBASE__recipe_exists(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__recipe_create(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__recipe_read(
    struct  rcb_t           *   rcb_p,
    struct  db_recipe_t     *   db_recipe_p
    );
//----------------------------------------------------------------------------
int
DBASE__recipe_update(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__recipe_delete(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
//  DBASE__info.c
//----------------------------------------------------------------------------
int
DBASE__info_exists(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__info_create(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__info_read(
    struct  rcb_t           *   rcb_p,
    struct  db_info_t       *   db_info_p
    );
//----------------------------------------------------------------------------
int
DBASE__info_update(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__info_delete(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
//  DBASE__cuisine.c
//----------------------------------------------------------------------------
int
DBASE__cuisine_exists(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__cuisine_create(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__cuisine_read(
    struct  rcb_t           *   rcb_p,
    struct  db_cuisine_t    *   db_cuisine_p
    );
//----------------------------------------------------------------------------
int
DBASE__cuisine_update(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__cuisine_delete(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
//  DBASE__occasion.c
//----------------------------------------------------------------------------
int
DBASE__occasion_exists(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__occasion_create(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__occasion_read(
    struct  rcb_t           *   rcb_p,
    struct  db_occasion_t   *   db_occasion_p
    );
//----------------------------------------------------------------------------
int
DBASE__occasion_update(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__occasion_delete(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
//  DBASE__meal.c
//----------------------------------------------------------------------------
int
DBASE__meal_exists(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__meal_create(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__meal_read(
    struct  rcb_t           *   rcb_p,
    struct  db_meal_t       *   db_meal_p
    );
//----------------------------------------------------------------------------
int
DBASE__meal_update(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__meal_delete(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
//  DBASE__diet.c
//----------------------------------------------------------------------------
int
DBASE__diet_exists(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__diet_create(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__diet_read(
    struct  rcb_t           *   rcb_p,
    struct  db_diet_t       *   db_diet_p
    );
//----------------------------------------------------------------------------
int
DBASE__diet_update(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__diet_delete(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
//  DBASE__appliance.c
//----------------------------------------------------------------------------
int
DBASE__appliance_exists(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__appliance_create(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__appliance_read(
    struct  rcb_t           *   rcb_p,
    struct  db_appliance_t  *   db_appliance_p
    );
//----------------------------------------------------------------------------
int
DBASE__appliance_update(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__appliance_delete(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
//  DBASE__chapter.c
//----------------------------------------------------------------------------
int
DBASE__chapter_exists(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__chapter_create(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__chapter_read(
    struct  rcb_t           *   rcb_p,
    struct  db_chapter_t    *   db_chapter_p
    );
//----------------------------------------------------------------------------
int
DBASE__chapter_update(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__chapter_delete(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
//  DBASE__source.c
//----------------------------------------------------------------------------
int
DBASE__source_exists(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__source_create(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__source_read(
    struct  rcb_t           *   rcb_p,
    struct  db_source_t     *   db_source_p
    );
//----------------------------------------------------------------------------
int
DBASE__source_update(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------
int
DBASE__source_delete(
    struct  rcb_t           *   rcb_p
    );
//----------------------------------------------------------------------------

/****************************************************************************/

#endif                      //    DBASE_LIB_H
